name: Test and Coverage

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      VITE_SUPABASE_DATABASE_URL: "https://mock-project.supabase.co"
      VITE_SUPABASE_ANON_KEY: "mock-anon-key-for-testing"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run tsc

      - name: Run tests with coverage
        run: npm run test:coverage


      - name: Add PR comment with coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const coverageData = JSON.parse(fs.readFileSync('build/test-coverage.json', 'utf8'));
              const summary = coverageData.total;
              
              if (summary) {
                const comment = `## Test Coverage Summary
                
                | Metric | Coverage | Covered/Total |
                |--------|----------|---------------|
                | Statements | ${summary.statements.pct.toFixed(1)}% | ${summary.statements.covered}/${summary.statements.total} |
                | Branches | ${summary.branches.pct.toFixed(1)}% | ${summary.branches.covered}/${summary.branches.total} |
                | Functions | ${summary.functions.pct.toFixed(1)}% | ${summary.functions.covered}/${summary.functions.total} |
                | Lines | ${summary.lines.pct.toFixed(1)}% | ${summary.lines.covered}/${summary.lines.total} |
                
                ðŸ¤– Auto-generated coverage report`;
                
                // Find existing coverage comment
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                });
                
                const existingComment = comments.find(comment => 
                  comment.body.includes('## Test Coverage Summary')
                );
                
                if (existingComment) {
                  // Update existing comment
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: comment
                  });
                } else {
                  // Create new comment
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.log('Coverage file not found or invalid:', error.message);
            }